# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.
"""
network = input("Введите адрес сети в формате: 10.1.1.0/24\n")
mask = network.split("/")[1]
bin_mask = "1"*int(mask) + (32-int(mask))*"0"
ip = network.split("/")[0]
ip1 = int(ip.split('.')[0])
ip2 = int(ip.split('.')[1])
ip3 = int(ip.split('.')[2])
ip4 = int(ip.split('.')[3])
ip1_bin = bin(ip1)[2:]
ip1_bin = (8-len(ip1_bin))*"0"+ip1_bin
ip2_bin = bin(ip2)[2:]
ip2_bin = (8-len(ip2_bin))*"0"+ip2_bin
ip3_bin = bin(ip3)[2:]
ip3_bin = (8-len(ip3_bin))*"0"+ip3_bin
ip4_bin = bin(ip4)[2:]
ip4_bin = (8-len(ip4_bin))*"0"+ip4_bin
ip = ip1_bin + ip2_bin + ip3_bin + ip4_bin
network = ip[:int(mask)] + (32-int(mask))*"0"
ip1 = int(network[:8],2)
ip2 = int(network[8:16],2)
ip3 = int(network[16:24],2)
ip4 = int(network[24:],2)
bin_mask1 = bin_mask[:8]
bin_mask2 = bin_mask[8:16]
bin_mask3 = bin_mask[16:24]
bin_mask4 = bin_mask[24:]
int_mask1 = int(bin_mask1,2)
int_mask2 = int(bin_mask2,2)
int_mask3 = int(bin_mask3,2)
int_mask4 = int(bin_mask4,2)


template = """
Network:
{ip1:<8}  {ip2:<8}  {ip3:<8}  {ip4:<8}
{ip1:08b}  {ip2:08b}  {ip3:08b}  {ip4:08b}
Mask:
/{mask}
{int_mask1:<8} {int_mask2:<8} {int_mask3:<8} {int_mask4:<8}
{int_mask1:<08b}  {int_mask2:<08b}  {int_mask3:<08b}  {int_mask4:<08b}"""

print(template.format(ip1=ip1,ip2=ip2,ip3=ip3,ip4=ip4, int_mask1=int_mask1,int_mask2=int_mask2,int_mask3=int_mask3,int_mask4=int_mask4,mask=mask))
